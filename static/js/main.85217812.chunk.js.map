{"version":3,"sources":["component/score.js","component/button.js","component/jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","react_default","a","createElement","score","topScore","images","id","imgURL","clicked","Images","state","array","handleClick","_this$state","_this","i","length","j","shuffle","setState","Math","floor","random","_ref","_this2","this","map","image","class","src","alt","key","onClick","React","Component","Jumbotron","component_button","App","className","jumbotron","div","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAUeA,EATA,SAACC,GAAD,OAEXC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8HACAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMI,OAClBH,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMK,YCDxBC,SAAS,CACX,CAACC,GAAG,EAAGC,OAAQ,wBAAyBC,SAAQ,GAChD,CAACF,GAAG,EAAGC,OAAQ,6BAA8BC,SAAQ,GACrD,CAACF,GAAG,EAAGC,OAAQ,sCAAuCC,SAAQ,GAC9D,CAACF,GAAG,EAAGC,OAAQ,6BAA8BC,SAAQ,GACrD,CAACF,GAAG,EAAGC,OAAQ,yBAA0BC,SAAQ,GACjD,CAACF,GAAG,EAAGC,OAAQ,wBAAyBC,SAAQ,GAChD,CAACF,GAAG,EAAGC,OAAQ,qBAAsBC,SAAQ,GAC7C,CAACF,GAAG,EAAGC,OAAQ,qCAAsCC,SAAQ,GAC7D,CAACF,GAAG,EAAGC,OAAQ,sBAAuBC,SAAQ,KAkEnCC,6MA3DXC,MAAQ,CACJC,MAAON,EACPD,SAAU,EACVD,MAAO,KAIXS,YAAc,SAAAN,GAEP,IAFa,IAAAO,EACiBC,EAAKJ,MAA/BC,EADSE,EACTF,MAAOR,EADEU,EACFV,MAAOC,EADLS,EACKT,SACVW,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAC/B,GAAIJ,EAAMI,GAAGT,KAAOA,EAChB,GAAKK,EAAMI,GAAGP,QAMP,CAACL,EAAQ,EACjB,IAAI,IAAIc,EAAI,EAAGA,EAAIN,EAAMK,OAAQC,IACzBN,EAAMM,GAAGT,UACTG,EAAMM,GAAGT,SAAQ,QARpBG,EAAMI,GAAGP,SAAQ,GAClBL,GAAS,GACGC,IACRA,EAAWD,GAYvBW,EAAKI,QAAQP,GACbG,EAAKK,SAAS,CACVR,MAAMA,EACNR,QACAC,gBAGXc,QAAQ,SAACjB,GACN,IAAK,IAAIc,EAAId,EAAEe,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIG,KAAKC,MAAMD,KAAKE,UAAYP,EAAI,IADPQ,EAEpB,CAACtB,EAAEgB,GAAIhB,EAAEc,IAAvBd,EAAEc,GAFgCQ,EAAA,GAE5BtB,EAAEgB,GAF0BM,EAAA,GAIvC,OAAOtB,2EAOF,IAAAuB,EAAAC,KACL,OACIzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAD,CAAOA,MAAOsB,KAAKf,MAAMP,MAAMC,SAAUqB,KAAKf,MAAMN,WACnDqB,KAAKf,MAAMC,MAAMe,IAAI,SAAAC,GAAK,OACvB3B,EAAAC,EAAAC,cAAA,OAAK0B,MAAM,SAASC,IAAKF,EAAMpB,OAAQuB,IAAI,GAAGC,IAAKJ,EAAMrB,GAAI0B,QAAS,kBAAIR,EAAKZ,YAAYe,EAAMrB,iBArD5F2B,IAAMC,iBCLZC,MAVf,WACI,OACInC,EAAAC,EAAAC,cAAA,OAAK0B,MAAM,SAEP5B,EAAAC,EAAAC,cAACkC,EAAD,QCcGC,0LAhBX,OACErC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAAA,UAAQoC,UAAU,cAMpBtC,EAAAC,EAAAC,cAACqC,EAAD,CAAWC,KAAG,aAVFN,cCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.85217812.chunk.js","sourcesContent":["import React from 'react';\n const Score = (props) =>(\n\n    <div>\n        <p>Try to click on all of the pictures! If you click on the same picture twice, the score will reset and start over!</p>\n        <h1>Score: {props.score}</h1>\n        <h1>Top Score: {props.topScore}</h1>\n    </div>\n )\n\nexport default Score;","import React from 'react';\nimport Score from \"./score.js\";\nimport '../styles/button.css';\n\n\nconst images = [\n    {id:0, imgURL: \"assets/img/smart.jpeg\", clicked:false},\n    {id:1, imgURL: \"assets/img/Evil-Kermit.jpg\", clicked:false},\n    {id:2, imgURL: \"assets/img/Distracted-Boyfriend.jpg\", clicked:false},\n    {id:3, imgURL: \"assets/img/tellMeMore.jpeg\", clicked:false},\n    {id:4, imgURL: \"assets/img/dafuq2.jpeg\", clicked:false},\n    {id:5, imgURL: \"assets/img/dafuq.jpeg\", clicked:false},\n    {id:6, imgURL: \"assets/img/cat.jpg\", clicked:false},\n    {id:7, imgURL: \"assets/img/That-Would-Be-Great.jpg\", clicked:false},\n    {id:8, imgURL: \"assets/img/mmm.jpeg\", clicked:false},\n];\n\n\n\nclass Images extends React.Component {\n    \n    state = {\n        array: images,\n        topScore: 0,\n        score: 0};\n    \n    \n\n    handleClick = id => {\n          var {array, score, topScore} = this.state\n           for(var i = 0; i < array.length; i++){\n             if (array[i].id === id)  {\n                 if (!array[i].clicked){\n                     array[i].clicked=true\n                    score += 1\n                    if (score > topScore){\n                        topScore = score\n                    }\n                 } else {score = 0\n                for(var j = 0; j < array.length; j++) {\n                    if (array[j].clicked) {\n                        array[j].clicked=false\n                    }\n                }\n                } \n                \n               }\n            }   \n            this.shuffle(array)\n            this.setState({\n                array:array,\n                score, \n                topScore\n            })\n    };\n     shuffle=(a)=> {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    }\n    \n    \n    \n    \n    \n    render() {\n        return(\n            <div>\n            <Score score={this.state.score}topScore={this.state.topScore}></Score>\n            {this.state.array.map(image =>( \n                <img class=\"images\" src={image.imgURL} alt=\"\" key={image.id} onClick={()=>this.handleClick(image.id)}/>\n\n            ))}\n            </div>\n        );\n    }\n}\n\nexport default Images;","import React from 'react';\nimport Images from \"./button\";\nimport '../styles/jumbo.css';\n\nfunction Jumbotron () {\n    return (\n        <div class=\"jumbo\">\n            \n            <Images></Images>\n            \n        </div>\n    )\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport Jumbotron from \"./component/jumbotron\";\nimport './styles/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        {/* <div className=\"container\">\n        <li>\n        <img className=\"click-item\"  src=\"../public/1_RkOd8UkCzVUCxNRomdLsYw.jpeg\" width=\"40\" height=\"40\" alt=\"\"></img>\n        </li>\n      </div> */}\n      <Jumbotron div ></Jumbotron>\n       \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}